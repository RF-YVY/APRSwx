# Generated by Django 5.2.4 on 2025-07-04 12:23

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="RadarProduct",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "product_code",
                    models.CharField(
                        choices=[
                            ("N0R", "Base Reflectivity"),
                            ("N0V", "Base Velocity"),
                            ("N0Z", "Base Reflectivity (248 nm)"),
                            ("N1R", "Base Reflectivity (124 nm)"),
                            ("N2R", "Base Reflectivity (248 nm)"),
                            ("N3R", "Base Reflectivity (124 nm)"),
                            ("NCR", "Composite Reflectivity"),
                            ("NTP", "Storm Total Precipitation"),
                            ("N1P", "One-Hour Precipitation"),
                            ("NVW", "Velocity Azimuth Display"),
                            ("NST", "Storm Tracking"),
                            ("NHI", "Hail Index"),
                            ("NMD", "Mesocyclone Detection"),
                            ("NTD", "Tornado Detection"),
                        ],
                        max_length=3,
                        unique=True,
                    ),
                ),
                ("description", models.CharField(max_length=200)),
                (
                    "units",
                    models.CharField(
                        help_text="Data units (e.g., dBZ, m/s)", max_length=50
                    ),
                ),
                (
                    "color_scale",
                    models.JSONField(
                        default=dict, help_text="Color scale for visualization"
                    ),
                ),
                ("min_value", models.FloatField(help_text="Minimum data value")),
                ("max_value", models.FloatField(help_text="Maximum data value")),
                (
                    "update_interval",
                    models.IntegerField(
                        default=300, help_text="Update interval in seconds"
                    ),
                ),
            ],
            options={
                "ordering": ["product_code"],
            },
        ),
        migrations.CreateModel(
            name="RadarSite",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "site_id",
                    models.CharField(
                        help_text="4-character radar site ID (e.g., KOKX)",
                        max_length=4,
                        unique=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Full name of radar site", max_length=100
                    ),
                ),
                ("latitude", models.FloatField(help_text="Radar site latitude")),
                ("longitude", models.FloatField(help_text="Radar site longitude")),
                ("elevation", models.FloatField(help_text="Radar elevation in meters")),
                ("frequency", models.FloatField(help_text="Radar frequency in MHz")),
                (
                    "beam_width",
                    models.FloatField(default=0.95, help_text="Beam width in degrees"),
                ),
                (
                    "max_range",
                    models.FloatField(default=460, help_text="Maximum range in km"),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("last_updated", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["site_id"],
            },
        ),
        migrations.CreateModel(
            name="WeatherStation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("station_id", models.CharField(max_length=20, unique=True)),
                ("name", models.CharField(max_length=200)),
                (
                    "station_type",
                    models.CharField(
                        choices=[
                            ("metar", "METAR Station"),
                            ("mesonet", "Mesonet Station"),
                            ("aprs", "APRS Weather Station"),
                            ("cwop", "CWOP Station"),
                            ("personal", "Personal Weather Station"),
                        ],
                        max_length=20,
                    ),
                ),
                ("elevation", models.FloatField(help_text="Elevation in meters")),
                ("operator", models.CharField(blank=True, max_length=100)),
                ("description", models.TextField(blank=True)),
                ("is_active", models.BooleanField(default=True)),
                ("last_observation", models.DateTimeField(blank=True, null=True)),
                (
                    "data_quality_score",
                    models.FloatField(
                        default=1.0,
                        help_text="Data quality score (0.0 to 1.0)",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
            ],
            options={
                "ordering": ["station_id"],
            },
        ),
        migrations.CreateModel(
            name="WeatherAlert",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "alert_id",
                    models.CharField(
                        help_text="Unique alert identifier", max_length=100, unique=True
                    ),
                ),
                (
                    "alert_type",
                    models.CharField(
                        choices=[
                            ("warning", "Warning"),
                            ("watch", "Watch"),
                            ("advisory", "Advisory"),
                            ("statement", "Statement"),
                            ("emergency", "Emergency"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "event_type",
                    models.CharField(help_text="Type of weather event", max_length=100),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("instruction", models.TextField(blank=True)),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("minor", "Minor"),
                            ("moderate", "Moderate"),
                            ("severe", "Severe"),
                            ("extreme", "Extreme"),
                        ],
                        max_length=20,
                    ),
                ),
                ("urgency", models.CharField(default="unknown", max_length=20)),
                ("certainty", models.CharField(default="unknown", max_length=20)),
                (
                    "affected_description",
                    models.TextField(
                        blank=True, help_text="Text description of affected area"
                    ),
                ),
                ("issued_at", models.DateTimeField()),
                ("effective_at", models.DateTimeField()),
                ("expires_at", models.DateTimeField()),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                ("is_cancelled", models.BooleanField(default=False)),
                ("issuing_office", models.CharField(max_length=100)),
                ("source_url", models.URLField(blank=True)),
            ],
            options={
                "ordering": ["-issued_at"],
                "indexes": [
                    models.Index(
                        fields=["alert_type", "is_active"],
                        name="weather_wea_alert_t_633ca7_idx",
                    ),
                    models.Index(
                        fields=["effective_at", "expires_at"],
                        name="weather_wea_effecti_99b8cb_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="RadarAnimation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start_time", models.DateTimeField()),
                ("end_time", models.DateTimeField()),
                ("frame_count", models.IntegerField()),
                (
                    "duration",
                    models.FloatField(help_text="Animation duration in seconds"),
                ),
                (
                    "coverage_description",
                    models.TextField(
                        blank=True, help_text="Text description of coverage area"
                    ),
                ),
                (
                    "animation_file",
                    models.FileField(
                        blank=True, null=True, upload_to="radar_animations/"
                    ),
                ),
                (
                    "thumbnail",
                    models.ImageField(
                        blank=True, null=True, upload_to="radar_thumbnails/"
                    ),
                ),
                (
                    "frame_rate",
                    models.FloatField(default=10.0, help_text="Frames per second"),
                ),
                (
                    "loop_count",
                    models.IntegerField(
                        default=0, help_text="Loop count (0 = infinite)"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "processing_time",
                    models.FloatField(help_text="Processing time in seconds"),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="animations",
                        to="weather.radarproduct",
                    ),
                ),
            ],
            options={
                "ordering": ["-start_time"],
                "indexes": [
                    models.Index(
                        fields=["product", "start_time"],
                        name="weather_rad_product_da4656_idx",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="RadarComposite",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("composite_time", models.DateTimeField(db_index=True)),
                (
                    "coverage_description",
                    models.TextField(
                        blank=True, help_text="Text description of coverage area"
                    ),
                ),
                (
                    "image_file",
                    models.FileField(
                        blank=True, null=True, upload_to="radar_composites/"
                    ),
                ),
                (
                    "data_file",
                    models.FileField(
                        blank=True, null=True, upload_to="radar_composites/data/"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "processing_time",
                    models.FloatField(help_text="Processing time in seconds"),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="composites",
                        to="weather.radarproduct",
                    ),
                ),
                (
                    "sites_included",
                    models.ManyToManyField(
                        related_name="composites", to="weather.radarsite"
                    ),
                ),
            ],
            options={
                "ordering": ["-composite_time"],
                "indexes": [
                    models.Index(
                        fields=["product", "composite_time"],
                        name="weather_rad_product_b78210_idx",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="RadarSweep",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("sweep_time", models.DateTimeField(db_index=True)),
                (
                    "elevation_angle",
                    models.FloatField(help_text="Elevation angle in degrees"),
                ),
                (
                    "azimuth_start",
                    models.FloatField(help_text="Starting azimuth in degrees"),
                ),
                (
                    "azimuth_end",
                    models.FloatField(help_text="Ending azimuth in degrees"),
                ),
                (
                    "data_file",
                    models.FileField(blank=True, null=True, upload_to="radar_data/"),
                ),
                (
                    "data_url",
                    models.URLField(blank=True, help_text="URL to external radar data"),
                ),
                ("is_processed", models.BooleanField(default=False)),
                ("processing_time", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "file_size",
                    models.IntegerField(default=0, help_text="File size in bytes"),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sweeps",
                        to="weather.radarproduct",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sweeps",
                        to="weather.radarsite",
                    ),
                ),
            ],
            options={
                "ordering": ["-sweep_time"],
                "indexes": [
                    models.Index(
                        fields=["site", "product", "sweep_time"],
                        name="weather_rad_site_id_918934_idx",
                    )
                ],
                "unique_together": {
                    ("site", "product", "sweep_time", "elevation_angle")
                },
            },
        ),
        migrations.CreateModel(
            name="WeatherObservation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("observation_time", models.DateTimeField(db_index=True)),
                ("temperature", models.FloatField(blank=True, null=True)),
                ("temperature_dewpoint", models.FloatField(blank=True, null=True)),
                ("temperature_windchill", models.FloatField(blank=True, null=True)),
                ("temperature_heatindex", models.FloatField(blank=True, null=True)),
                ("pressure", models.FloatField(blank=True, null=True)),
                ("pressure_tendency", models.FloatField(blank=True, null=True)),
                (
                    "humidity",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("wind_speed", models.FloatField(blank=True, null=True)),
                (
                    "wind_direction",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(360),
                        ],
                    ),
                ),
                ("wind_gust", models.FloatField(blank=True, null=True)),
                ("precipitation_1h", models.FloatField(blank=True, null=True)),
                ("precipitation_6h", models.FloatField(blank=True, null=True)),
                ("precipitation_24h", models.FloatField(blank=True, null=True)),
                ("visibility", models.FloatField(blank=True, null=True)),
                ("cloud_coverage", models.CharField(blank=True, max_length=20)),
                (
                    "cloud_base",
                    models.FloatField(
                        blank=True, help_text="Cloud base in meters", null=True
                    ),
                ),
                ("present_weather", models.CharField(blank=True, max_length=100)),
                ("weather_code", models.CharField(blank=True, max_length=20)),
                (
                    "solar_radiation",
                    models.FloatField(
                        blank=True, help_text="Solar radiation in W/m²", null=True
                    ),
                ),
                ("uv_index", models.FloatField(blank=True, null=True)),
                ("quality_flags", models.JSONField(blank=True, default=dict)),
                ("is_quality_controlled", models.BooleanField(default=False)),
                ("raw_data", models.JSONField(blank=True, default=dict)),
                (
                    "station",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="observations",
                        to="weather.weatherstation",
                    ),
                ),
            ],
            options={
                "ordering": ["-observation_time"],
                "indexes": [
                    models.Index(
                        fields=["station", "observation_time"],
                        name="weather_wea_station_4a2af6_idx",
                    )
                ],
                "unique_together": {("station", "observation_time")},
            },
        ),
    ]
